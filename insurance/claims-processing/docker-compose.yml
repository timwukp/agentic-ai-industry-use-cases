version: '3.8'

services:
  # Main Application Service
  claims-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    container_name: claims-processing-api
    restart: unless-stopped
    
    # Security Configuration
    user: "1000:1000"  # Non-root user
    read_only: true    # Read-only filesystem
    
    # Security Options
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # Capability Management
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # Only if binding to privileged ports
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Environment Variables
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=claims_db
      - POSTGRES_USER=claims_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - JWT_SECRET_KEY_FILE=/run/secrets/jwt_secret
      - ENCRYPTION_KEY_FILE=/run/secrets/encryption_key
      - SSL_ENABLED=true
      - SSL_CERTFILE=/etc/ssl/certs/app.crt
      - SSL_KEYFILE=/etc/ssl/private/app.key
      - LOG_LEVEL=INFO
      - ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
      - ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
    
    # Secrets Management
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - encryption_key
    
    # Volume Mounts (minimal and read-only where possible)
    volumes:
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
          mode: 1777
      - type: tmpfs
        target: /var/tmp
        tmpfs:
          size: 100M
          mode: 1777
      - type: bind
        source: ./logs
        target: /app/logs
        read_only: false
      - type: bind
        source: ./ssl/certs
        target: /etc/ssl/certs
        read_only: true
      - type: bind
        source: ./ssl/private
        target: /etc/ssl/private
        read_only: true
    
    # Port Mapping (only expose necessary ports)
    ports:
      - "8443:8000"  # HTTPS only
    
    # Health Check
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Network Configuration
    networks:
      - app-network
      - db-network
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=claims-api"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: claims-postgres
    restart: unless-stopped
    
    # Security Configuration
    user: "999:999"  # postgres user
    read_only: true
    
    # Security Options
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # Capability Management
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Environment Variables
    environment:
      - POSTGRES_DB=claims_db
      - POSTGRES_USER=claims_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    # Secrets
    secrets:
      - postgres_password
    
    # Volume Mounts
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
          mode: 1777
      - type: tmpfs
        target: /var/run/postgresql
        tmpfs:
          size: 100M
          mode: 0755
      - type: bind
        source: ./database/init
        target: /docker-entrypoint-initdb.d
        read_only: true
      - type: bind
        source: ./database/ssl
        target: /etc/ssl/postgresql
        read_only: true
    
    # Health Check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claims_user -d claims_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Network Configuration
    networks:
      - db-network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=postgres"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: claims-redis
    restart: unless-stopped
    
    # Security Configuration
    user: "999:999"  # redis user
    read_only: true
    
    # Security Options
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # Capability Management
    cap_drop:
      - ALL
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Command with security configuration
    command: >
      redis-server
      --requirepass-file /run/secrets/redis_password
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
      --databases 1
      --logfile /var/log/redis/redis.log
      --loglevel notice
      --syslog-enabled yes
      --syslog-ident redis
      --protected-mode yes
      --bind 0.0.0.0
      --port 6379
      --tcp-backlog 511
      --unixsocket /var/run/redis/redis.sock
      --unixsocketperm 770
    
    # Secrets
    secrets:
      - redis_password
    
    # Volume Mounts
    volumes:
      - type: volume
        source: redis_data
        target: /data
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
          mode: 1777
      - type: tmpfs
        target: /var/run/redis
        tmpfs:
          size: 100M
          mode: 0755
      - type: bind
        source: ./redis/logs
        target: /var/log/redis
        read_only: false
    
    # Health Check
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Network Configuration
    networks:
      - app-network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=redis"

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: claims-nginx
    restart: unless-stopped
    
    # Security Configuration
    user: "101:101"  # nginx user
    read_only: true
    
    # Security Options
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # Capability Management
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Volume Mounts
    volumes:
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
      - type: bind
        source: ./nginx/conf.d
        target: /etc/nginx/conf.d
        read_only: true
      - type: bind
        source: ./ssl/certs
        target: /etc/ssl/certs
        read_only: true
      - type: bind
        source: ./ssl/private
        target: /etc/ssl/private
        read_only: true
      - type: tmpfs
        target: /var/cache/nginx
        tmpfs:
          size: 100M
          mode: 0755
      - type: tmpfs
        target: /var/run
        tmpfs:
          size: 100M
          mode: 0755
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
          mode: 1777
    
    # Port Mapping
    ports:
      - "443:443"
      - "80:80"
    
    # Health Check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Network Configuration
    networks:
      - app-network
    
    # Dependencies
    depends_on:
      - claims-api
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=nginx"

# Network Configuration
networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: claims-app-br
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
    internal: false
    
  db-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: claims-db-br
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "false"
      com.docker.network.driver.mtu: 1500
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
    internal: true  # Database network is internal only

# Volume Configuration
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

# Secrets Configuration
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  
  redis_password:
    file: ./secrets/redis_password.txt
  
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  
  encryption_key:
    file: ./secrets/encryption_key.txt

# Additional Security Configurations
x-security-defaults: &security-defaults
  security_opt:
    - no-new-privileges:true
    - apparmor:docker-default
  cap_drop:
    - ALL
  read_only: true
  tmpfs:
    - /tmp:size=100M,mode=1777
    - /var/tmp:size=100M,mode=1777

# Logging Configuration Template
x-logging-defaults: &logging-defaults
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"